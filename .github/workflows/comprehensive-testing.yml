name: Comprehensive Educational Testing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-xdist pytest-mock pytest-benchmark
          # Ensure coverage plugin is available on the runner so --cov flags work
          pip install pytest-cov coverage

      - name: Create test directories
        run: |
          mkdir -p data
          mkdir -p htmlcov

      - name: Run unit tests
        run: |
          pytest tests/ -v -m "unit or not (integration or e2e)" --cov=src --cov-report=xml --cov-report=html --cov-fail-under=65

      - name: Run integration tests
        run: |
          pytest tests/ -v -m "integration" --cov=src --cov-append --cov-report=xml --cov-fail-under=65

      - name: Run end-to-end tests
        run: |
          pytest tests/ -v -m "e2e" --cov=src --cov-append --cov-report=xml --cov-fail-under=65

      - name: Run performance tests
        run: |
          pytest tests/ -v -m "slow" --benchmark-only

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  quality-gates:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black mypy safety bandit
          pip install -r requirements.txt

      - name: Run code formatting check
        run: |
          black --check --diff src/ tests/

      - name: Run linting
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

      - name: Run type checking
        run: |
          mypy src/ --ignore-missing-imports --no-strict-optional

      - name: Run security scan
        run: |
          safety check
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            bandit-report.json
            htmlcov/

  educational-regression:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run educational system regression tests
        run: |
          pytest tests/ -v -m "educational" --tb=short

      - name: Run analysis system regression tests
        run: |
          pytest tests/ -v -m "analysis" --tb=short

      - name: Verify no critical functionality regression
        run: |
          pytest tests/test_basic_analysis.py -v
          pytest tests/test_educational_framework.py -v
          pytest tests/test_gamified_progress_tracker.py -v
